"""Initial migration

Revision ID: 001
Revises: 
Create Date: 2024-01-01 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('fyers_access_token', sa.Text(), nullable=True),
    sa.Column('fyers_refresh_token', sa.Text(), nullable=True),
    sa.Column('fyers_token_expires_at', sa.DateTime(), nullable=True),
    sa.Column('risk_tolerance', sa.String(length=50), nullable=False),
    sa.Column('max_position_size', sa.Float(), nullable=True),
    sa.Column('max_daily_loss', sa.Float(), nullable=True),
    sa.Column('notification_preferences', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    
    op.create_table('strategies',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('strategy_type', sa.String(length=100), nullable=False),
    sa.Column('parameters', sa.JSON(), nullable=False),
    sa.Column('risk_parameters', sa.JSON(), nullable=False),
    sa.Column('entry_rules', sa.JSON(), nullable=False),
    sa.Column('exit_rules', sa.JSON(), nullable=False),
    sa.Column('position_sizing_rules', sa.JSON(), nullable=False),
    sa.Column('max_position_size', sa.Float(), nullable=True),
    sa.Column('stop_loss_percentage', sa.Float(), nullable=True),
    sa.Column('take_profit_percentage', sa.Float(), nullable=True),
    sa.Column('max_daily_trades', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_paper_trading', sa.Boolean(), nullable=False),
    sa.Column('total_trades', sa.Integer(), nullable=False),
    sa.Column('winning_trades', sa.Integer(), nullable=False),
    sa.Column('losing_trades', sa.Integer(), nullable=False),
    sa.Column('total_pnl', sa.Float(), nullable=False),
    sa.Column('max_drawdown', sa.Float(), nullable=False),
    sa.Column('sharpe_ratio', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_executed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('alerts',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('exchange', sa.String(length=20), nullable=False),
    sa.Column('alert_type', sa.Enum('BUY', 'SELL', 'HOLD', 'STOP_LOSS', 'TAKE_PROFIT', name='alerttype'), nullable=False),
    sa.Column('source', sa.Enum('CHARTLINK', 'MANUAL', 'SYSTEM', 'WEBHOOK', name='alertsource'), nullable=False),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('metadata', sa.JSON(), nullable=False),
    sa.Column('status', sa.Enum('RECEIVED', 'PROCESSING', 'PROCESSED', 'FAILED', 'IGNORED', name='alertstatus'), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('matched_strategy_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('external_id', sa.String(length=100), nullable=True),
    sa.Column('external_source', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['matched_strategy_id'], ['strategies.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_alerts_symbol'), 'alerts', ['symbol'], unique=False)
    op.create_index(op.f('ix_alerts_external_id'), 'alerts', ['external_id'], unique=False)
    
    op.create_table('portfolios',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('exchange', sa.String(length=20), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('average_price', sa.Float(), nullable=True),
    sa.Column('current_price', sa.Float(), nullable=True),
    sa.Column('unrealized_pnl', sa.Float(), nullable=False),
    sa.Column('realized_pnl', sa.Float(), nullable=False),
    sa.Column('total_pnl', sa.Float(), nullable=False),
    sa.Column('market_value', sa.Float(), nullable=True),
    sa.Column('invested_amount', sa.Float(), nullable=True),
    sa.Column('stop_loss_price', sa.Float(), nullable=True),
    sa.Column('take_profit_price', sa.Float(), nullable=True),
    sa.Column('max_loss', sa.Float(), nullable=True),
    sa.Column('first_trade_date', sa.DateTime(), nullable=True),
    sa.Column('last_trade_date', sa.DateTime(), nullable=True),
    sa.Column('trade_count', sa.Integer(), nullable=False),
    sa.Column('metadata', sa.JSON(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_portfolios_symbol'), 'portfolios', ['symbol'], unique=False)
    
    op.create_table('trades',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('strategy_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('alert_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('exchange', sa.String(length=20), nullable=False),
    sa.Column('side', sa.Enum('BUY', 'SELL', name='orderside'), nullable=False),
    sa.Column('order_type', sa.Enum('MARKET', 'LIMIT', 'STOP_LOSS', 'STOP_LIMIT', name='ordertype'), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('stop_price', sa.Float(), nullable=True),
    sa.Column('filled_quantity', sa.Integer(), nullable=False),
    sa.Column('average_price', sa.Float(), nullable=True),
    sa.Column('total_amount', sa.Float(), nullable=True),
    sa.Column('fyers_order_id', sa.String(length=100), nullable=True),
    sa.Column('fyers_status', sa.String(length=50), nullable=True),
    sa.Column('fyers_message', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'SUBMITTED', 'FILLED', 'PARTIALLY_FILLED', 'CANCELLED', 'REJECTED', 'FAILED', name='tradestatus'), nullable=False),
    sa.Column('submitted_at', sa.DateTime(), nullable=True),
    sa.Column('filled_at', sa.DateTime(), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(), nullable=True),
    sa.Column('realized_pnl', sa.Float(), nullable=True),
    sa.Column('brokerage_fee', sa.Float(), nullable=True),
    sa.Column('taxes', sa.Float(), nullable=True),
    sa.Column('net_pnl', sa.Float(), nullable=True),
    sa.Column('stop_loss_price', sa.Float(), nullable=True),
    sa.Column('take_profit_price', sa.Float(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('tags', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['alert_id'], ['alerts.id'], ),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_trades_symbol'), 'trades', ['symbol'], unique=False)
    op.create_index(op.f('ix_trades_fyers_order_id'), 'trades', ['fyers_order_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_trades_fyers_order_id'), table_name='trades')
    op.drop_index(op.f('ix_trades_symbol'), table_name='trades')
    op.drop_table('trades')
    op.drop_index(op.f('ix_portfolios_symbol'), table_name='portfolios')
    op.drop_table('portfolios')
    op.drop_index(op.f('ix_alerts_external_id'), table_name='alerts')
    op.drop_index(op.f('ix_alerts_symbol'), table_name='alerts')
    op.drop_table('alerts')
    op.drop_table('strategies')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
